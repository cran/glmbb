
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>      ## example from Venables and Ripley (2002, pp. 190-2.)
>      ## ripped off from help page for predict.glm
>      ldose <- rep(0:5, 2)
>      numdead <- c(1, 4, 9, 13, 18, 20, 0, 2, 6, 10, 12, 16)
>      sex <- factor(rep(c("M", "F"), c(6, 6)))
>      SF <- cbind(numdead, numalive = 20-numdead)
>      budworm.lg <- glm(SF ~ sex*ldose, family = binomial)
> ## IGNORE_RDIFF_BEGIN
>      summary(budworm.lg)

Call:
glm(formula = SF ~ sex * ldose, family = binomial)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-1.39849  -0.32094  -0.07592   0.38220   1.10375  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -2.9935     0.5527  -5.416 6.09e-08 ***
sexM          0.1750     0.7783   0.225    0.822    
ldose         0.9060     0.1671   5.422 5.89e-08 ***
sexM:ldose    0.3529     0.2700   1.307    0.191    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 124.8756  on 11  degrees of freedom
Residual deviance:   4.9937  on  8  degrees of freedom
AIC: 43.104

Number of Fisher Scoring iterations: 4

> ## IGNORE_RDIFF_END
> 
>  library(glmbb)
> 
>  foo <- glmbb(SF ~ sex*ldose, family = binomial, crit = "BIC")
> ## IGNORE_RDIFF_BEGIN
>  summary(foo)

Results of search for hierarchical models with lowest BIC.
Search was for all models with BIC no larger than min(BIC) + 10
These are shown below.

  criterion  weight   formula         
  44.32      0.58208  SF ~ sex + ldose
  45.04      0.40579  SF ~ sex*ldose  
  52.06      0.01213  SF ~ ldose      

> ## IGNORE_RDIFF_END
> 
>  bar <- glmbb(SF ~ sex*ldose, family = binomial, crit = "BIC", BIC.opt = "sum")
> ## IGNORE_RDIFF_BEGIN
>  summary(bar)

Results of search for hierarchical models with lowest BIC.
Search was for all models with BIC no larger than min(BIC) + 10
These are shown below.

  criterion  weight  formula         
  53.31      0.8006  SF ~ sex + ldose
  57.03      0.1248  SF ~ sex*ldose  
  58.06      0.0746  SF ~ ldose      

> ## IGNORE_RDIFF_END
> 
>  e <- foo$envir
>  e.names <- ls(envir = e, pattern = "^sha1")
>  names(get(e.names[1], envir = e))
 [1] "coefficients"       "residuals"          "fitted.values"     
 [4] "effects"            "R"                  "rank"              
 [7] "qr"                 "family"             "linear.predictors" 
[10] "deviance"           "aic"                "null.deviance"     
[13] "iter"               "weights"            "prior.weights"     
[16] "df.residual"        "df.null"            "y"                 
[19] "converged"          "boundary"           "model"             
[22] "call"               "formula"            "terms"             
[25] "data"               "offset"             "control"           
[28] "method"             "contrasts"          "xlevels"           
[31] "criterion"          "criterion.deviance" "criterion.penalty" 
> 
>  foo.criteria <- Map(function(x) get(x, envir = e)$criterion, e.names)
>  foo.deviance <- Map(function(x) get(x, envir = e)$criterion.deviance, e.names)
>  foo.penalty <- Map(function(x) get(x, envir = e)$criterion.penalty, e.names)
>  foo.formulae <- Map(function(x) get(x, envir = e)$formula, e.names)
>  foo.formulae <- vapply(foo.formulae, tidy.formula.hierarchical, character(1))
>  foo.coefficients <- Map(function(x) get(x, envir = e)$coefficients, e.names)
>  foo.p <- lapply(foo.coefficients, function(x) sum(! is.na(x)))
>  foo.n <- length(numdead)
> 
>  e <- bar$envir
>  e.names <- ls(envir = e, pattern = "^sha1")
> 
>  bar.criteria <- Map(function(x) get(x, envir = e)$criterion, e.names)
>  bar.deviance <- Map(function(x) get(x, envir = e)$criterion.deviance, e.names)
>  bar.penalty <- Map(function(x) get(x, envir = e)$criterion.penalty, e.names)
>  bar.formulae <- Map(function(x) get(x, envir = e)$formula, e.names)
>  bar.formulae <- vapply(bar.formulae, tidy.formula.hierarchical, character(1))
>  bar.coefficients <- Map(function(x) get(x, envir = e)$coefficients, e.names)
>  bar.p <- lapply(bar.coefficients, function(x) sum(! is.na(x)))
>  bar.n <- sum(SF)
> 
>  idx <- match(foo.formulae, bar.formulae)
>  all(! is.na(idx))
[1] TRUE
> 
>  all.equal(foo.deviance, bar.deviance[idx], check.attrib = FALSE)
[1] TRUE
> 
>  foo.penalty <- as.vector(unlist(foo.penalty))
>  bar.penalty <- as.vector(unlist(bar.penalty))
>  foo.p <- as.vector(unlist(foo.p))
>  bar.p <- as.vector(unlist(bar.p))
> 
>  all.equal(foo.penalty, log(foo.n) * foo.p)
[1] TRUE
>  all.equal(bar.penalty, log(bar.n) * bar.p)
[1] TRUE
> 
>  foo.deviance <- as.vector(unlist(foo.deviance))
>  bar.deviance <- as.vector(unlist(bar.deviance))
>  foo.criteria <- as.vector(unlist(foo.criteria))
>  bar.criteria <- as.vector(unlist(bar.criteria))
> 
>  all.equal(foo.criteria, foo.deviance + foo.penalty)
[1] TRUE
>  all.equal(bar.criteria, bar.deviance + bar.penalty)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  0.227   0.028   0.250 
